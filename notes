
----------------

- align option
 - change the -p option to take a string
  - either 80.3 format or {width:80 depth:3 align:true}
 - node table should cover all columns including nested
  - what format? flat or nested?
  - if flat then walk for values, driven by table
   - linear search is no great but okay for small size with align

- add time color

- check oj @foo works the same as -x

- data diff
 - which package (alt?) or a new one or throw it in oj **alt**
 - what else is related?
  - deep copy

- option to detect duplicate keys or make part of validator
 - change stack to include array and map or maybe just map and nil means array
  - check performance hit
  - check added condition of whether keys should be checked. If too high then copy code
 - or separate stack in func for key maps along with dip code

 - regex op =~
  - /^xyz&/
 - in addition to parse callback support chan for results
 - cmd/oj
  - read args from file (SEN format)
   - also check ~/.oj.fin or ~/.oj - graphql emacs mode works well
  - palette in cfg file
  - build or restructure json
   - use a template based approach along with JSONPath
- advanced ops
 - in - a in [1,2,3]
 - exists, empty, or has
 - size or length - [?(@.x size > 3)] or [?(size @.x > 3)]
-------------
- cmd/oj
  -colors list of colors or maybe map?
   -p (palette) key=red
   -key red

------------------

- Match a JavaScript regular expression. For example, [?(@.description =~ /cat.*/i)]
- Exists syntax? [?(@.x exists)]
