
- tasks before release
 - reflect for path and script
 - unit tests
 - docs
 - CI - travis or something else?
 - remove tree (maybe create separate benchmark repo)

- examples
 - encode object and recover
  - Decompose()
  - Recomposer.Recompose()
 - AsInt and others

- converters (is there a better name than conv?)
 - Int
 - Bool
 - String
 - Time
 - Float

- can Node be moved to a separate directory?
 - only use path to dig, not methods off of Node?
 - if that is possible then a separate dir for jp could be used

- maybe a parser path wrapper that returns a Node
 - type assersions should always pass

- generifiy replace with what ever node dir becomes if changed
 - maybe gen is best

- oj
 - parser

- oj/jp
 - jsonpath

- oj/gen
 - just the data


----------------
- next/todo
 - regex op =~
 - scripts
 - cmd/oj palette

-------------
- cmd/oj
  -colors list of colors or maybe map?
   -p (palette) key=red
   -key red


- ojg/doc.go
 - JSON tools
 - different approach than go json
  - interface{} the same, referred to as simple type
  - also generic data, not to be confused with golang discussions
   - types elements to match JSON, if it is allowed as an elemtn it will write to JSON
   - light weight with very low memory and performance impact
  - go json relies on decoration on fixed structs with no support for interface elements
   - borrowing from Oj for Ruby, types can be encoded and later recomposed
   - OjG supports multiple docs in one string or stream
  - includes builders for simple and generic
  - JSON path on generic and simple
  - validator


- jp - https://goessner.net/articles/JsonPath
 - jp.Str(n gd.Node, path string, defVal string) string
  - same on path expression or element or *fragment*
	// Get(key string) []Node
	// GetFirst(key string) Node
	// Set(path string, val Node) error
	// SetFirst(path string, val Node) error
	// Remove(key string) []Node
	// RemoveFirst(key string) Node

Match a JavaScript regular expression. For example, [?(@.description =~ /cat.*/i)] matches items whose description starts with cat (case-insensitive).

Use to negate a filter: [?(!@.isbn)] matches items that do not have the isbn property.

- how to handle things in []
 - maybe [] is a check for an array/subscript
  - then things to do on the array elements after that
   - so ArrayStart expr followed by filter, slice, etc then terminated with an arrayEnd

- jp.Expr
 - has all top level funcs
 - []Frag
 - bracketed bool
 - Get
  - calls get() on first frag with array of rest
   - goes to next in array

- jp.Frag
 - get
 - first
 - set
 - setOne
 - remove
 - removeFirst

- parse methods
 - tried functions instead of switch, slower
  - tried array of 256 functions for value switching
 - all in one function is fastest
 - col++ created overhead as well
