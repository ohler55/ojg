
----------------
- next/todo
 - regex op =~
  - /^xyz&/
 - cmd/oj
  - read args from file (SEN format)
   - also check ~/.oj.fin or ~/.oj - graphql emacs mode works well
  - palette in cfg file
  - build or restructure json
   - use a template based approach along with JSONPath
- advanced ops
 - in - a in [1,2,3]
 - exists, empty, or has
 - size or length - [?(@.x size > 3)] or [?(size @.x > 3)]
-------------
- cmd/oj
  -colors list of colors or maybe map?
   -p (palette) key=red
   -key red

------------------

- Match a JavaScript regular expression. For example, [?(@.description =~ /cat.*/i)]
- Exists syntax? [?(@.x exists)]

-----------------------------------
- try single switch combining mode and byte
 - modes are pointers to tables
 - table maps by to switch code that spans all (256 should be enough I think)
  - setup table in global init()
   - use named const for clarity
    - value0, value1, valueX41, commaX6f
    - or x6fValue
   - list whats needed first count, then init tables
    - can tables be static?
     - maybe 8 across or something
-----------------------------------
- parse methods attempted
 - tried functions instead of switch, slower
  - tried array of 256 functions for value switching
 - all in one function is fastest
 - col++ created overhead as well
