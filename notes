
- SEN
 - allow single quote for string delimiters
  - add map entries for single quote and maps for handling
  - or just keep track of starting quote char

 - allow use of + to join strings like mongosh uses
  - add mode after closing quote (strQuote)
   - skip spaces and then just like value and also +
   - could value just be updated to handle + or rather + to be more than just for numbers?
    - plusMap
     - spaces ok
     - waiting for " (or ')
      - look at stack
       - string, append and replace
       - array, append to last in array and replace
       - map
        - need to know last key - how??
         - keep lastKey and lastStrKey on parser
          - set lastKey on addString()
          - on valueMap +
           - set lastStrKey to lastKey
          - on addString()
           - use lastStrKey then set to empty

- pretty
 - align maps as well as arrays

- unit tests and example for cmd/oj

- optimize unmarshal
 - direct parse to struct

----------------

- option to detect duplicate keys or make part of validator
 - change stack to include array and map or maybe just map and nil means array
  - check performance hit
  - check added condition of whether keys should be checked. If too high then copy code
 - or separate stack in func for key maps along with dip code

- regex op =~
  - /^xyz&/
 - in addition to parse callback support chan for results
 - cmd/oj
  - read args from file (SEN format)
   - also check ~/.oj.fin or ~/.oj - graphql emacs mode works well
  - palette in cfg file
  - build or restructure json
   - use a template based approach along with JSONPath
- advanced ops
 - in - a in [1,2,3]
 - exists, empty, or has
 - size or length - [?(@.x size > 3)] or [?(size @.x > 3)]
-------------

- Match a JavaScript regular expression. For example, [?(@.description =~ /cat.*/i)]
- Exists syntax? [?(@.x exists)]
